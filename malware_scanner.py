import os
import hashlib
import requests
import csv
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm  # Progress bar for better user feedback
from datetime import datetime

# URL to download the malware signature database
SIGNATURE_DB_URL = "https://bazaar.abuse.ch/export/txt/sha256/recent/"

# Function to download malware signatures
def download_malware_signatures():
    print("Downloading malware signatures...")
    response = requests.get(SIGNATURE_DB_URL)
    
    if response.status_code == 200:
        # Save the signature file locally
        with open("malware_signatures.txt", "wb") as f:
            f.write(response.content)
        print("Malware signatures downloaded successfully.")
    else:
        print("Failed to download signatures. Please check your internet connection.")
    
# Function to load malware signatures from the file
def load_malware_signatures():
    with open("malware_signatures.txt", "r") as f:
        signatures = f.read().splitlines()
    return set(signatures)

# Function to calculate the SHA256 hash of a file
def calculate_sha256(file_path):
    sha256_hash = hashlib.sha256()
    
    try:
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except Exception as e:
        print(f"Error reading file {file_path}: {e}")
        return None

# Function to scan a single file and check if it matches any malware signatures
def scan_file(file_path, malware_signatures):
    file_hash = calculate_sha256(file_path)
    
    if file_hash and file_hash in malware_signatures:
        return (file_path, file_hash, True)  # File is infected
    else:
        return (file_path, file_hash, False)  # File is clean

# Function to scan a directory recursively
def scan_directory(directory, malware_signatures, max_threads=4):
    files_to_scan = []
    
    # Walk through the directory and gather all files
    for root, dirs, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            files_to_scan.append(file_path)

    infected_files = []
    
    # Using ThreadPoolExecutor to scan files concurrently
    with ThreadPoolExecutor(max_workers=max_threads) as executor:
        # Using tqdm to show a progress bar
        results = list(tqdm(executor.map(lambda f: scan_file(f, malware_signatures), files_to_scan), total=len(files_to_scan)))
        
        for file_path, file_hash, is_infected in results:
            if is_infected:
                infected_files.append((file_path, file_hash))
    
    return infected_files

# Function to log infected files to a CSV report
def log_infected_files(infected_files):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_filename = f"malware_report_{timestamp}.csv"
    
    with open(report_filename, mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["File Path", "SHA256 Hash"])
        
        for file_path, file_hash in infected_files:
            writer.writerow([file_path, file_hash])
    
    print(f"Malware report saved to {report_filename}")

# Main function to run the malware detection tool
def run_malware_scanner(directory, max_threads=4):
    # Step 1: Download and load malware signatures
    download_malware_signatures()
    malware_signatures = load_malware_signatures()
    
    # Step 2: Scan the directory for malware
    print(f"Scanning directory: {directory}")
    infected_files = scan_directory(directory, malware_signatures, max_threads)
    
    # Step 3: Log the infected files
    if infected_files:
        print(f"{len(infected_files)} infected files found!")
        log_infected_files(infected_files)
    else:
        print("No infected files found.")

# Start the scan by asking the user for the directory
if __name__ == "__main__":
    target_directory = input("Enter the directory to scan: ")
    run_malware_scanner(target_directory)
